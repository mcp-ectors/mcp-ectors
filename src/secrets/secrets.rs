// Generated by `wit-bindgen` 0.37.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod wasix {
  pub mod mcp {

    #[allow(dead_code, unused_imports, clippy::all)]
    pub mod secrets_store {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// An error type that encapsulates the different errors that can occur fetching secrets
      #[derive(Clone)]
      pub enum SecretsError {
        /// This indicates an error from an "upstream" secrets source.
        /// As this could be almost _anything_ (such as Vault, Kubernetes Secrets, KeyValue buckets, etc),
        /// the error message is a string.
        Upstream(_rt::String),
        /// This indicates an error from an I/O operation.
        /// As this could be almost _anything_ (such as a file read, network connection, etc),
        /// the error message is a string.
        /// Depending on how this ends up being consumed,
        /// we may consider moving this to use the `wasi:io/error` type instead.
        /// For simplicity right now in supporting multiple implementations, it is being left as a string.
        Io(_rt::String),
        /// This indicates that the secret was not found. Generally "not found" errors will
        /// be handled by the upstream secrets backend, but there are cases where the host
        /// may need to return this error.
        NotFound,
      }
      impl ::core::fmt::Debug for SecretsError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            SecretsError::Upstream(e) => {
              f.debug_tuple("SecretsError::Upstream").field(e).finish()
            }
            SecretsError::Io(e) => {
              f.debug_tuple("SecretsError::Io").field(e).finish()
            }
            SecretsError::NotFound => {
              f.debug_tuple("SecretsError::NotFound").finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for SecretsError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }

      impl std::error::Error for SecretsError {}
      /// A secret value can be either a string or a byte array, which lets you
      /// store binary data as a secret.
      #[derive(Clone)]
      pub enum SecretValue {
        /// A string value
        String(_rt::String),
        /// A byte array value
        Bytes(_rt::Vec::<u8>),
      }
      impl ::core::fmt::Debug for SecretValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            SecretValue::String(_) => {
              write!(f, "string(redacted)")
            }
            SecretValue::Bytes(_) => {
              write!(f, "bytes(redacted)")
            }
          }
        }
      }

      /// A secret is a resource that can only be borrowed. This allows you to
      /// pass around handles to secrets and not reveal the values until a
      /// component needs them.
      /// You need to use the reveal interface to get the value.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Secret{
        handle: _rt::Resource<Secret>,
      }

      impl Secret{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Secret{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasix:mcp/secrets-store@0.0.1")]
            extern "C" {
              #[link_name = "[resource-drop]secret"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      #[allow(unused_unsafe, clippy::all)]
      /// Gets a single opaque secrets value set at the given key if it exists
      pub fn get(key: &str,) -> Result<Secret,SecretsError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
          let vec0 = key;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasix:mcp/secrets-store@0.0.1")]
          extern "C" {
            #[link_name = "get"]
            fn wit_import2(_: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import2(ptr0.cast_mut(), len0, ptr1);
          let l3 = i32::from(*ptr1.add(0).cast::<u8>());
          let result13 = match l3 {
            0 => {
              let e = {
                let l4 = *ptr1.add(4).cast::<i32>();

                Secret::from_handle(l4 as u32)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l5 = i32::from(*ptr1.add(4).cast::<u8>());
                let v12 = match l5 {
                  0 => {
                    let e12 = {
                      let l6 = *ptr1.add(8).cast::<*mut u8>();
                      let l7 = *ptr1.add(12).cast::<usize>();
                      let len8 = l7;
                      let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                      _rt::string_lift(bytes8)
                    };
                    SecretsError::Upstream(e12)
                  }
                  1 => {
                    let e12 = {
                      let l9 = *ptr1.add(8).cast::<*mut u8>();
                      let l10 = *ptr1.add(12).cast::<usize>();
                      let len11 = l10;
                      let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                      _rt::string_lift(bytes11)
                    };
                    SecretsError::Io(e12)
                  }
                  n => {
                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                    SecretsError::NotFound
                  }
                };

                v12
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          };
          result13
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn reveal(s: &Secret,) -> SecretValue{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasix:mcp/secrets-store@0.0.1")]
          extern "C" {
            #[link_name = "reveal"]
            fn wit_import1(_: i32, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          extern "C" fn wit_import1(_: i32, _: *mut u8, ){ unreachable!() }
          wit_import1((s).handle() as i32, ptr0);
          let l2 = i32::from(*ptr0.add(0).cast::<u8>());
          let v9 = match l2 {
            0 => {
              let e9 = {
                let l3 = *ptr0.add(4).cast::<*mut u8>();
                let l4 = *ptr0.add(8).cast::<usize>();
                let len5 = l4;
                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                _rt::string_lift(bytes5)
              };
              SecretValue::String(e9)
            }
            n => {
              debug_assert_eq!(n, 1, "invalid enum discriminant");
              let e9 = {
                let l6 = *ptr0.add(4).cast::<*mut u8>();
                let l7 = *ptr0.add(8).cast::<usize>();
                let len8 = l7;

                _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
              };
              SecretValue::Bytes(e9)
            }
          };
          let result10 = v9;
          result10
        }
      }

    }

  }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod wasix {
    pub mod mcp {

      #[allow(dead_code, unused_imports, clippy::all)]
      pub mod secrets_list {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        #[derive(Clone)]
        pub struct SecretsDescription {
          pub name: _rt::String,
          pub description: _rt::String,
          pub required: bool,
        }
        impl ::core::fmt::Debug for SecretsDescription {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("SecretsDescription").field("name", &self.name).field("description", &self.description).field("required", &self.required).finish()
          }
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_list_secrets_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::list_secrets();
        let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
        let vec5 = result0;
        let len5 = vec5.len();
        let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 20, 4);
        let result5 = if layout5.size() != 0 {
          let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
          if ptr.is_null()
          {
            _rt::alloc::handle_alloc_error(layout5);
          }
          ptr
        }else {
          ::core::ptr::null_mut()
        };
        for (i, e) in vec5.into_iter().enumerate() {
          let base = result5.add(i * 20);
          {
            let SecretsDescription{ name:name2, description:description2, required:required2, } = e;
            let vec3 = (name2.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr().cast::<u8>();
            let len3 = vec3.len();
            ::core::mem::forget(vec3);
            *base.add(4).cast::<usize>() = len3;
            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
            let vec4 = (description2.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *base.add(12).cast::<usize>() = len4;
            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
            *base.add(16).cast::<u8>() = (match required2 { true => 1, false => 0 }) as u8;
          }
        }
        *ptr1.add(4).cast::<usize>() = len5;
        *ptr1.add(0).cast::<*mut u8>() = result5;
        ptr1
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_list_secrets<T: Guest>(arg0: *mut u8,) {
        let l0 = *arg0.add(0).cast::<*mut u8>();
        let l1 = *arg0.add(4).cast::<usize>();
        let base6 = l0;
        let len6 = l1;
        for i in 0..len6 {
          let base = base6.add(i * 20);
          {
            let l2 = *base.add(0).cast::<*mut u8>();
            let l3 = *base.add(4).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
            let l4 = *base.add(8).cast::<*mut u8>();
            let l5 = *base.add(12).cast::<usize>();
            _rt::cabi_dealloc(l4, l5, 1);
          }
        }
        _rt::cabi_dealloc(base6, len6 * 20, 4);
      }
      pub trait Guest {
        fn list_secrets() -> _rt::Vec::<SecretsDescription>;
      }
      #[doc(hidden)]

      macro_rules! __export_wasix_mcp_secrets_list_0_0_1_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[unsafe(export_name = "wasix:mcp/secrets-list@0.0.1#list-secrets")]
          unsafe extern "C" fn export_list_secrets() -> *mut u8 {
            $($path_to_types)*::_export_list_secrets_cabi::<$ty>()
          }
          #[unsafe(export_name = "cabi_post_wasix:mcp/secrets-list@0.0.1#list-secrets")]
          unsafe extern "C" fn _post_return_list_secrets(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_list_secrets::<$ty>(arg0)
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_wasix_mcp_secrets_list_0_0_1_cabi;
      #[repr(align(4))]
      struct _RetArea([::core::mem::MaybeUninit::<u8>; 8]);
      static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);

    }

  }
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub use alloc_crate::alloc;
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_secrets_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasix::mcp::secrets_list::__export_wasix_mcp_secrets_list_0_0_1_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasix::mcp::secrets_list);
  )
}
#[doc(inline)]
//pub(crate) use __export_secrets_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.37.0:wasix:mcp@0.0.1:secrets:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 470] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd8\x02\x01A\x02\x01\
A\x04\x01B\x0d\x01q\x03\x08upstream\x01s\0\x02io\x01s\0\x09not-found\0\0\x04\0\x0d\
secrets-error\x03\0\0\x01p}\x01q\x02\x06string\x01s\0\x05bytes\x01\x02\0\x04\0\x0c\
secret-value\x03\0\x03\x04\0\x06secret\x03\x01\x01i\x05\x01j\x01\x06\x01\x01\x01\
@\x01\x03keys\0\x07\x04\0\x03get\x01\x08\x01h\x05\x01@\x01\x01s\x09\0\x04\x04\0\x06\
reveal\x01\x0a\x03\0\x1dwasix:mcp/secrets-store@0.0.1\x05\0\x01B\x05\x01r\x03\x04\
names\x0bdescriptions\x08required\x7f\x04\0\x13secrets-description\x03\0\0\x01p\x01\
\x01@\0\0\x02\x04\0\x0clist-secrets\x01\x03\x04\0\x1cwasix:mcp/secrets-list@0.0.\
1\x05\x01\x04\0\x17wasix:mcp/secrets@0.0.1\x04\0\x0b\x0d\x01\0\x07secrets\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.223.0\x10wit-bind\
gen-rust\x060.37.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

